print("Aviv is the winner")
} else {
print("game over")
}
show(new_vec)
v9 <- sample(1:5, 50,replace=TRUE)
for (i in 1:length(new_vec)) {
if (v9[i]==5){
new_vec[i] <- "nice"
} else {
new_vec[i] <- "well"
}
}
show(new_vec)
p <- c(0.336, 0.238, 0.114, 0.312)
m <- c(100,400,700,0)
t <- sum(p*m)
t
v <- sum((p-m)^2*t)
rnorm(1)
rnorm(1,165,sd=20)
rnorm(10,165,sd=20)
rnorm(100,165,sd=20)
v <- rnorm(10000,165,sd=20)
pnorm(165,165,20)
install.packages("learnr")
library(plot3D)
library(learnr)
abs(x)
pnorm(0.95)
pnorm(70,58,sqrt(20))
aa <- qnorm(0.975,-5,1)
ab <- qnorm(0.975,0,1)
ac <- qnorm(0.975,25,1)
ba <- qnorm(0.025,-5,1)
bb <- qnorm(0.025,0,1)
bc <- qnorm(0.025,25,1)
arr <- c(aa,ab,ac)
qnorm(0.975,-5,1)
ab <- qnorm(0.975,0,1)
ac <- qnorm(0.975,25,1)
arr <- c(aa,ab,ac)
ba <- qnorm(0.025,-5,1)
bb <- qnorm(0.025,0,1)
bc <-
aa <- qnorm(0.975,-5,1)
bc <- qnorm(0.025,25,1)
arr <- c(aa,ab,ac)
m <- matrix(arr,brr)
brr <- c(ba,bb,bc)
m <- matrix(arr,brr)
m <- matrix(arr,brr, nrow = 2)
m <- matrix(arr,brr, nrow = 2, ncol = 3)
show(m)
m <- matrix(arr:brr, nrow = 2, ncol = 3)
m <- matrix([arr:brr], nrow = 2, ncol = 3)
m <- matrix([arr,brr], nrow = 2, ncol = 3)
m <- matrix([arr,brr], nrow = 2, ncol = 3)
m <- matrix({arr,brr}, nrow = 2, ncol = 3)
m <- matrix({arr:brr}, nrow = 2, ncol = 3)
m <- matrix(arr+brr, nrow = 2, ncol = 3)
show(m)
m <- matrix(arr:brr, nrow = 2, ncol = 3)
m <- matrix(arr,brr, nrow = 3, ncol = 2)
show(m)
m <- matrix(brr,arr, nrow = 3, ncol = 2)
show(m)
m <- matrix([,brr],[,arr], nrow = 2, ncol = 3)
m <- matrix([,1], nrow = 2, ncol = 3)
m <- matrix(, nrow = 2, ncol = 3)
show(m)
m[,1] <- arr
m <- matrix(, nrow = 3, ncol = 2)
m[,1] <- arr
show(m)
m[,2] <- brr
show(m)
a <- c(0:60,0.5)
a <- c(0:60,0.5)
a <- c(0:60, step(0.5))
v <- [2,4,5,6,2]
b <- [5,1,5,6,2]
v*b
c <- v*b
v <- [2,4,5,6,2]
b <- [5,1,5,6,2]
c <- v*b
v <- (2,4,5,6,2)
b <- (5,1,5,6,2)
v <- c(2,4,5,6,2)
b <- c(5,1,5,6,2)
c <- v*b
v <- c(2,4,5,6,2)
b <- c(5,1,5,6,2)
v <- "fgfashd"
b <- c(1,2,3,4,5,6,7,8,9,10)
quantile(b, 0.2)
quantile(b, 0.3)
quantile(b, 1)
quantile(b,0.5)
#Find the probability that a Female student wants to study Social psychology
Prob_So_and_F <- Prob_F - Prob_Co_and_F - Prob_Cl_and_F
Prob_So_given_F <- Prob_So_and_F / Prob_F
Prob_So_given_F
#Using the law of total probability find the probability that a certain student wants to study Social Psychology
# (I know there are easier ways to do that, but it is important to practice this equation)
Prob_So <- (Prob_So_given_M * Prob_M) + (Prob_So_given_F * Prob_F)
Prob_So
#Fill the matrix
PsyStudents["Social","Female"] <- Prob_So_and_F * n_Tot
n_M <- n_Tot*Prob_M
PsyStudents["Clinical","Male"] <- n_M - PsyStudents["Cognitive","Male"]-PsyStudents["Social","Male"]
PsyStudents
x <- list("gas"=2,g="fad")
View(x)
View(x)
x$gas
# empty matrix - 3 rows * 2 columns
PsyStudents <- matrix(c(NA,9,NA,36,NA,NA),3,2)
View(PsyStudents)
x$gas
x <- list("gas"=2 ,g="fad")
x$gas
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
# import the file into a dataset
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
getwd()
setwd("/Documents/חומר ללימודים/שנה א׳/סמסטר א׳/מבוא לסטטיסטיקה/עבודה בR/GitHub/Starbucks-Menu-Analyzation")
# import the file into a dataset
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
constant_variable <- dataset$Total.Fat..g.
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
#getting mean, median, and mode values
cm_mean <- mean(constant_variable)
cm_median <- median(constant_variable)
cm_mode <- mode(constant_variable)
findmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#finding mode value
cm_mode <- findmode(constant_variable)
test <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
find_deviation_percentage(test,1)
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] == c) {
not_the_number <- not_the_number+1
}
}
return(not_the_number/length(values))
}
test <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
find_deviation_percentage(test,1)
ind_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
not_the_number <- not_the_number+1
}
}
return(not_the_number/length(values))
}
test <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
find_deviation_percentage(test,1)
deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
}
}
return(not_the_number/length(values))
}
find_deviation_percentage(test,1)
g <- find_deviation_percentage(test,1)
test[3]
ind_deviation_percentage <- function(values, c) {
not_the_number <- 0
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
}
}
return(not_the_number/length(values))
}
g <- find_deviation_percentage(test,1)
find_deviation_percentage(test,1)
find_deviation_percentage(test,1)
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
}
}
#getting median deviation percentage
#find_deviation_percentage <- function(values, c) {
c <- 1
values <- test
not_the_number <- 0
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
}
}
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
}
}
return(not_the_number/length(values))
}
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
#function for finding the mode value
findmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#getting mean, median and mode values
cm_mean <- mean(constant_variable)
cm_median <- median(constant_variable)
cm_mode <- findmode(constant_variable)
#getting median deviation percentage
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
}
}
return(not_the_number/length(values))
}
test <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
find_deviation_percentage(test,1)
find_deviation_percentage(test,2)
g <- find_deviation_percentage(test,2)
test <- c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
g <- find_deviation_percentage(test,1)
test <- c(1,1,1,2,1,1,1,1,1,1,1,1,1,1,6,1,1,1,1,1)
g <- find_deviation_percentage(test,1)
ind_deviation_percentage <- function(values, c) {
not_the_number <- 0
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
print(not_the_number)
}
}
return(100*not_the_number/length(values))
}
test <- c(1,1,1,2,1,1,1,1,1,1,1,1,1,1,6,1,1,1,1,1)
g <- find_deviation_percentage(test,1)
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
print(length(values))
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
print(not_the_number)
}
}
return((100*not_the_number)/length(values))
}
g <- find_deviation_percentage(test,1)
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
print(values[i])
not_the_number <- not_the_number+1
print(not_the_number)
}
}
return((100*not_the_number)/length(values))
}
g <- find_deviation_percentage(test,1)
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
not_the_number <- not_the_number+1
}
}
return((100*not_the_number)/length(values))
}
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
#function for finding the mode value
findmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#function for finding deviation percentage from a given value
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
not_the_number <- not_the_number+1
}
}
return((100*not_the_number)/length(values))
}
#getting mean, median and mode values
cv_mean <- mean(constant_variable)
cv_median <- median(constant_variable)
cv_mode <- findmode(constant_variable)
#getting median deviation percentage
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
#function for finding the mode value
findmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#function for finding deviation percentage from a given value
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
not_the_number <- not_the_number+1
}
}
return((100*not_the_number)/length(values))
}
#getting mean, median and mode values
cv_mean <- mean(constant_variable)
cv_median <- median(constant_variable)
cv_mode <- findmode(constant_variable)
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
View(dataset)
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
#getting median, mean and mode values
cv_median <- median(constant_variable)
cv_mean <- mean(constant_variable)
cv_mode <- findmode(constant_variable)
#function for finding the mode value
findmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#function for finding deviation percentage from a given value
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
not_the_number <- not_the_number+1
}
}
return((100*not_the_number)/length(values))
}
cv_mode <- findmode(constant_variable)
#getting median deviation percentage
cv_median_dev_percentage <- find_deviation_percentage(constant_variable, cv_median)
#getting median deviation percentage
cv_median_dev_percent <- find_deviation_percentage(constant_variable, cv_median)
#getting mean deviation percentage
cv_mean_dev_percent <- find_deviation_percentage(constant_variable, cv_mean)
#getting mode deviation percentage
cv_mode_dev_percent <- find_deviation_percentage(constant_variable, cv_mode)
#creating a name vector for the three deviations
s_names <- c("cv_median_dev_percent", "cv_mean_dev_percent", "cv_mode_dev_percent")
#creating a name vector for the three deviations
s_names <- c("median deviation percentage", "mean deviation percentage", "mode deviation percentage")
#getting highest value of the three deviations
s_names[which.max(c(cv_median_dev_percent,cv_mean_dev_percent,cv_mode_dev_percent))]
#getting lowest value of the three deviations
s_names[which.min(c(cv_median_dev_percent, cv_mean_dev_percent, cv_mode_dev_percent))]
dataset = read.csv(file = "starbucks_drinkMenu_expanded.csv")
##### G #####
#Getting the constant variable
constant_variable <- dataset$Total.Fat..g.
#function for finding the mode value
findmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
#function for finding deviation percentage from a given value
find_deviation_percentage <- function(values, c) {
not_the_number <- 0
for (i in 1:length(values)) {
if (values[i] != c) {
not_the_number <- not_the_number+1
}
}
return((100*not_the_number)/length(values))
}
#getting median, mean and mode values
cv_median <- median(constant_variable)
cv_mean <- mean(constant_variable)
cv_mode <- findmode(constant_variable)
#getting median, mean and mode deviation percentages
cv_median_dev_percent <- find_deviation_percentage(constant_variable, cv_median)
cv_mean_dev_percent <- find_deviation_percentage(constant_variable, cv_mean)
cv_mode_dev_percent <- find_deviation_percentage(constant_variable, cv_mode)
#creating a name vector for the three deviations
s_names <- c("median deviation percentage", "mean deviation percentage", "mode deviation percentage")
#getting highest value of the three deviations
s_names[which.max(c(cv_median_dev_percent, cv_mean_dev_percent, cv_mode_dev_percent))]
#getting lowest value of the three deviations
s_names[which.min(c(cv_median_dev_percent, cv_mean_dev_percent, cv_mode_dev_percent))]
#getting highest value of the three deviations
highest_percentage <- s_names[which.max(c(cv_median_dev_percent, cv_mean_dev_percent, cv_mode_dev_percent))]
#getting lowest value of the three deviations
lowest_percentage <- s_names[which.min(c(cv_median_dev_percent, cv_mean_dev_percent, cv_mode_dev_percent))]
output_log <- paste("The highest deviation percentage value is the " , highest_percentage , ", and the lowest is " , lowest_percentage , sep = "")
print(output_log)
output_log <- paste("The highest deviation percentage value is the " , highest_percentage , ", and the lowest is the " , lowest_percentage , sep = "")
print(output_log)
##### F #####
beverage <- dataset$Beverage
##### F #####
beverage <- unique(dataset$Beverage)
##### F #####
beverage <- unique(dataset$Beverage)
for (i in 1:length(beverage)) {
if (grepl("Latte", beverage[i])) {
print(beverage[i])
}
}
# getting only latte beverages
latte_beverages <- c()
for (i in 1:length(beverage)) {
if (grepl("Latte", beverage[i])) {
append(latte_beverages, beverage[i])
}
}
append(latte_beverages, beverage[i])
for (i in 1:length(beverage)) {
if (grepl("Latte", beverage[i])) {
latte_beverages <-  append(latte_beverages, beverage[i])
}
}
latte_beverages
comb_result <- combn(length(latte_beverages), 4)
View(comb_result)
comb_result <- sum(combn(length(latte_beverages), 4))
comb_result <- sum(choose(length(latte_beverages), 4))
comb_result <- choose(length(latte_beverages), 4)
print(paste("The number of ",4 ," Latte combinations out of ", length(latte_beverages), " is ", comb_result))
print(paste("The number of ",4 ," Latte combinations out of ", length(latte_beverages), " is ", comb_result, sep = ""))
plot(constant_variable)
print(output_log)
dataset = read.csv(file = "dataset.csv")
library(ggplot2)
dataset = read.csv(file = "dataset.csv")
dir()
setwd("~/Documents/חומר ללימודים/שנה א׳/סמסטר א׳/מבוא לסטטיסטיקה/עבודה בR/GitHub/SocialMediaResearch")
dataset = read.csv(file = "dataset.csv")
qqplot(dataset$Followers)
qqnorm(dataset$Followers)
qqline(dataset$Followers)
qqline(dataset$Authentic.engagement)
qqnorm(dataset$Authentic.engagement)
ggqqnorm(dataset$Authentic.engagement)
qnorm(dataset$Authentic.engagement)
qqplot(dataset$Followers,c[10000,1000000])
dnorm(dataset$Followers)
hist(dataset$Followers)
hist(dataset$Engagement.avg)
hist(dataset$category_1)
qqplot(dataset$Followers)
qqnorm(dataset$Followers)
hist(dataset$Followers)
hist(dataset$Authentic.engagement)
hist(dataset$Authentic.engagement, denity = 100)
hist(dataset$Authentic.engagement, denity = TRUE)
hist(dataset$Authentic.engagement, density = 100)
hist(dataset$Authentic.engagement, density = 10000)
hist(dataset$Authentic.engagement, density = 10)
hist(dataset$Authentic.engagement, breaks = 100)
hist(dataset$Authentic.engagement, breaks = 10000)
hist(dataset$Authentic.engagement, breaks = 1000)
hist(dataset$Authentic.engagement, breaks = 100)
